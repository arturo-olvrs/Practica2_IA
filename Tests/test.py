#!/usr/bin/env python
import subprocess

EXEC = "./practica2SG"
MAP_DIR = "mapas"

tests = [

    # Tests nivel 0
    ("mapa30.map", [0, 0, 17, 5, 0, 17, 17, 0, 3, 3, 0], None),
    ("mapa30.map", [0, 0, 24, 7, 2, 17, 17, 0, 3, 3, 0], None),
    ("mapa30.map", [0, 0, 24, 10, 2, 17, 17, 0, 3, 3, 0], None),
    ("mapa30.map", [0, 0, 16, 9, 2, 16, 14, 6, 3, 3, 0], None),
    ("mapa75.map", [0, 0, 10, 18, 2, 42, 30, 6, 3, 3, 0], None),
    ("gemini2.map", [0, 0, 3, 10, 2, 3, 13, 6, 3, 3, 0], None),
    ("paldea25.map", [1, 0, 76, 15, 6, 22, 68, 2, 3, 3, 0], None),
    ("chess.map", [1, 0, 45, 4, 0, 45, 14, 0, 3, 3, 0], None),
    ("luminalia25.map", [1, 0, 28, 14, 3, 27, 84, 5, 3, 3, 0], None),
    ("bosque_prohibido.map", [1, 0, 24, 5, 4, 12, 7, 4, 3, 3, 0], None),
    ("islas25.map", [1, 0, 11, 3, 2, 12, 3, 2, 3, 3, 0], None),

    # Tests nivel 1
    ("mapa30.map", [0, 1, 21, 9, 2, 15, 24, 6, 3, 3, 0], None),
    ("mapa50.map", [0, 1, 5, 3, 2, 36, 44, 6, 3, 3, 0], None),
    ("mapa75.map", [0, 1, 20, 9, 2, 15, 23, 6, 3, 3, 0], None),
    ("mapa100.map", [0, 1, 20, 9, 2, 80, 96, 0, 3, 3, 0], None),
    ("gemini2.map", [0, 1, 3, 10, 2, 3, 13, 6, 3, 3, 0], None),
    ("2ez.map", [0, 1, 14, 3, 4, 7, 7, 4, 3, 3, 0], None),
    ("mapa30.map", [0, 1, 16, 9, 2, 16, 14, 6, 3, 3, 0], None),
    ("mapaop.map", [0, 1, 16, 9, 2, 16, 14, 6, 3, 3, 0], None),
    ("chess.map", [1, 1, 45, 6, 1, 4, 43, 5, 3, 3, 0], None),
    ("islas25.map", [1, 1, 11, 3, 2, 96, 88, 2, 3, 3, 0], None),
    ("islas_cambio_climatico.map", [1, 1, 11, 3, 2, 12, 3, 2, 3, 3, 0], None),
    ("islas_cambio_climatico.map", [1, 1, 11, 3, 2, 96, 88, 2, 3, 3, 0], None),
    ("islas25.map", [1, 1, 11, 3, 2, 12, 3, 2, 3, 3, 0], None),
    ("paldea25.map", [1, 1, 91, 46, 2, 91, 48, 6, 3, 3, 0], None),
    ("paldea25.map", [1, 1, 30, 58, 4, 91, 48, 6, 3, 3, 0], None),
    ("luminalia25.map", [1, 1, 91, 44, 2, 9, 58, 6, 3, 3, 0], None),
    ("luminalia25.map", [1, 1, 45, 44, 3, 56, 55, 7, 3, 3, 0], None),

    # Tests nivel 2
    ("mapa30.map", [1, 2, 11, 4, 4, 26, 26, 0, 3, 4, 0], 2989),
    ("mapa30.map", [1, 2, 24, 9, 4, 26, 26, 0, 20, 9, 0], 2979),
    ("mapa30.map", [1, 2, 24, 13, 0, 26, 26, 0, 25, 17, 0], 2983),
    ("mapa50.map", [1, 2, 40, 16, 6, 46, 27, 2, 27, 3, 0], 2743),
    ("luminalia25.map", [1, 2, 32, 74, 6, 5, 96, 0, 32, 75, 0], 2962),
    ("luminalia25.map", [1, 2, 80, 58, 6, 5, 96, 0, 20, 48, 0], 2926),
    ("paldea25.map", [1, 2, 91, 45, 2, 96, 96, 0, 30, 57, 0], 2913),
    ("paldea25.map", [1, 2, 53, 85, 6, 96, 96, 0, 49, 4, 0], 2757),
    ("chess.map", [1, 2, 25, 24, 0, 46, 46, 3, 24, 24, 0], 2951),
    ("chess.map", [1, 2, 27, 27, 0, 46, 46, 3, 26, 27, 0], 2954),
    ("luminalia25.map", [1, 2, 59, 89, 2, 5, 96, 0, 29, 15, 0], 2914),
    ("scape25.map", [1, 2, 7, 8, 0, 15, 8, 5, 22, 8, 0], 2949),
    ("scape25.map", [1, 2, 7, 8, 0, 15, 8, 5, 22, 15, 0], 2955),
    ("scape25.map", [1, 2, 7, 8, 0, 15, 8, 5, 22, 21, 0], 2961),
    ("scape25.map", [1, 2, 7, 14, 0, 15, 8, 5, 22, 8, 0], 2939),
    ("scape25.map", [1, 2, 7, 14, 0, 15, 8, 5, 22, 15, 0], 2945),
    ("scape25.map", [1, 2, 7, 14, 0, 15, 8, 5, 22, 21, 0], 2951),
    ("scape25.map", [1, 2, 7, 21, 0, 15, 8, 5, 22, 8, 0], 2929),
    ("scape25.map", [1, 2, 7, 21, 0, 15, 8, 5, 22, 15, 0], 2935),
    ("scape25.map", [1, 2, 7, 21, 0, 15, 8, 5, 22, 21, 0], 2941),
    ("scape25.map", [1, 2, 7, 8, 2, 15, 8, 5, 22, 8, 0], 2951),

    # Tests nivel 3
    ("mapa30.map", [1, 3, 7, 7, 2, 11, 6, 4, 12, 5, 0], 2977),
    ("mapa30.map", [1, 3, 5, 5, 2, 10, 10, 4, 12, 5, 0], 2604),
    ("mapa30.map", [1, 3, 26, 26, 0, 11, 4, 4, 3, 4, 0], 2979),
    ("mapa30.map", [1, 3, 26, 26, 0, 24, 9, 4, 20, 9, 0], 2961),
    ("mapa50.map", [1, 3, 46, 27, 0, 20, 8, 2, 18, 12, 0], 2656),
    ("mapa50.map", [1, 3, 46, 27, 2, 40, 16, 6, 27, 3, 0], 2627),
    ("luminalia25.map", [1, 3, 5, 96, 0, 32, 74, 6, 32, 75, 0], 2828),
    ("luminalia25.map", [1, 3, 5, 96, 0, 80, 58, 6, 20, 48, 0], 2782),
    ("paldea25.map", [1, 3, 96, 96, 0, 91, 45, 2, 30, 57, 0], 2846),
    ("paldea25.map", [1, 3, 96, 96, 0, 53, 85, 6, 49, 4, 0], 2571),
    ("chess.map", [1, 3, 46, 46, 3, 25, 24, 0, 24, 24, 0], 2925),
    ("chess.map", [1, 3, 46, 46, 3, 27, 27, 0, 26, 27, 0], 2934),
    ("luminalia25.map", [1, 3, 5, 96, 0, 59, 89, 2, 29, 15, 0], 2659),
    ("scape25.map", [1, 3, 15, 8, 5, 22, 21, 4, 7, 8, 0], 2816),
    ("scape25.map", [1, 3, 15, 8, 5, 22, 21, 4, 7, 14, 0], 2694),
    ("scape25.map", [1, 3, 15, 8, 5, 22, 21, 4, 7, 21, 0], 2670),
    ("scape25.map", [1, 3, 15, 8, 5, 22, 21, 6, 7, 21, 0], 2672),
    ("scape25.map", [1, 3, 15, 8, 5, 22, 15, 4, 7, 8, 0], 2670),
    ("scape25.map", [1, 3, 15, 8, 5, 22, 15, 4, 7, 14, 0], 2758),
    ("scape25.map", [1, 3, 15, 8, 5, 22, 15, 4, 7, 21, 0], 2753),
    ("scape25.map", [1, 3, 15, 8, 5, 22, 8, 4, 7, 8, 0], 2643),
    ("scape25.map", [1, 3, 15, 8, 5, 22, 8, 4, 7, 14, 0], 2757),
    ("scape25.map", [1, 3, 15, 8, 5, 22, 8, 4, 7, 21, 0], 2753),
]

# --- Tests del Nivel 4 ---

tests4 = [
    ("4P1", "mapa30.map", [1, 4, 4, 4, 6, 12, 12, 2, 7, 8, 0, 16, 6, 0, 26, 9, 1, 25, 16, 0, 3, 3, 0, 5, 10, 0, 16, 14, 0, 19, 10, 0, 21, 4, 1, 7, 4, 0, 24, 4, 0, 12, 3, 0, 6, 15, 0, 25, 18, 0, 8, 19, 0, 14, 14, 0, 23, 15, 1, 26, 8, 0, 10, 24, 1, 19, 26, 1, 25, 7, 0, 16, 11, 0, 22, 15, 1, 20, 15, 1, 22, 19, 1, 10, 20, 0, 4, 13, 0, 26, 24, 1, 9, 6, 0, 26, 10, 0, 17, 19, 1, 25, 13, 0, 24, 20, 1, 25, 19, 1, 12, 18, 1, 8, 23, 0, 9, 13, 1, 6, 5, 0, 8, 16, 1, 12, 5, 0, 3, 14, 1, 11, 22, 1, 11, 8, 0, 5, 17, 0, 7, 4, 0, 21, 3, 0, 23, 4, 1, 15, 5, 0, 7, 23, 0, 21, 19, 0, 4, 15, 1, 6, 13, 1, 23, 17, 1, 6, 26, 1, 5, 4, 0, 24, 10, 1, 16, 17, 1, 13, 20, 0, 21, 9, 1, 26, 22, 0, 22, 24, 0, 14, 4, 0, 24, 26, 0, 7, 18, 1, 6, 21, 1, 9, 9, 1, 18, 6, 0, 19, 15, 1, 16, 21, 0, 3, 14, 0, 12, 10, 0, 25, 13, 1, 17, 24, 1, 6, 20, 1, 14, 14, 0, 9, 21, 0, 5, 18, 1, 20, 20, 0, 19, 10, 1, 5, 18, 1, 18, 21, 1, 9, 22, 0, 20, 19, 1, 7, 15, 0, 26, 20, 0, 10, 17, 1, 17, 19, 1, 8, 23, 1, 8, 9, 1, 9, 5, 0, 20, 3, 0, 19, 11, 1, 6, 23, 0, 16, 8, 0, 26, 14, 0, 17, 4, 0, 8, 25, 0, 14, 13, 1, 25, 14, 0, 8, 5, 1, 20, 21, 1, 4, 18, 1, 14, 25, 1], 63, 173, 335),
    ("4P2", "mapa50.map", [1, 4, 28, 25, 4, 28, 20, 2, 36, 23, 0, 39, 8, 0, 46, 26, 1, 39, 34, 0, 26, 37, 0, 18, 46, 0, 3, 46, 0, 3, 3, 0, 10, 17, 1, 39, 45, 0, 9, 16, 0, 38, 13, 0, 27, 23, 0, 31, 18, 0, 45, 31, 0, 35, 7, 0, 12, 6, 1, 40, 7, 0, 20, 6, 1, 10, 25, 1, 41, 30, 0, 14, 31, 0, 26, 24, 1, 38, 26, 1, 38, 20, 1, 44, 14, 0, 17, 40, 0, 45, 3, 1, 4, 9, 0, 33, 44, 0, 17, 3, 1, 3, 11, 0, 42, 13, 1, 26, 18, 1, 38, 25, 1, 33, 26, 0, 46, 46, 1, 36, 14, 0, 36, 31, 1, 17, 34, 0, 8, 22, 1, 44, 41, 1, 16, 11, 0, 44, 17, 0, 29, 32, 0, 42, 21, 0, 46, 19, 1, 40, 34, 0, 45, 24, 0, 46, 7, 0, 44, 32, 1, 21, 30, 1, 14, 39, 1, 15, 22, 1, 11, 9, 0, 13, 27, 1, 20, 8, 1, 45, 5, 0], 33, 113, 162),
    ("4P3", "mapa75.map", [1, 4, 11, 47, 0, 6, 47, 4, 9, 51, 0, 19, 33, 0, 29, 31, 1, 33, 31, 0, 54, 43, 0, 51, 67, 0, 59, 68, 0, 57, 29, 0, 47, 16, 1, 68, 6, 0, 29, 4, 0, 3, 32, 0, 16, 25, 0, 57, 17, 0, 41, 35, 0, 47, 27, 0, 38, 71, 1, 68, 47, 0, 53, 10, 1, 18, 10, 1, 60, 11, 0, 16, 38, 0, 62, 45, 1, 22, 47, 1, 39, 37, 1, 57, 39, 0, 57, 30, 0, 66, 21, 1, 26, 60, 0, 68, 5, 0, 6, 14, 1, 49, 66, 0, 26, 4, 1, 4, 17, 1, 63, 19, 1, 40, 28, 0, 57, 38, 1, 50, 39, 0, 69, 69, 1, 52, 21, 0, 55, 47, 1, 25, 51, 1, 11, 33, 0, 66, 61, 0, 24, 17, 0, 67, 26, 0, 51, 71, 1, 44, 49, 0, 64, 32, 0, 69, 29, 0], 31, 55, 76),
    ("4P4", "mapa100.map", [1, 4, 63, 31, 6, 63, 32, 2, 66, 40, 0, 75, 24, 0, 85, 36, 1, 83, 6, 0, 60, 10, 0, 33, 11, 0, 84, 7, 0, 86, 40, 0, 68, 77, 1, 79, 91, 0, 19, 33, 0, 76, 25, 0, 55, 47, 0, 62, 36, 0, 51, 95, 0, 91, 63, 0, 71, 14, 1, 24, 13, 0, 80, 15, 1, 21, 51, 1, 83, 61, 0, 29, 63, 0, 52, 49, 1, 78, 52, 1, 76, 40, 1, 90, 28, 0, 39, 80, 0, 91, 6, 1, 94, 52, 0, 8, 19, 0, 66, 89, 1, 34, 6, 0, 6, 23, 1, 85, 26, 1, 53, 37, 1, 79, 51, 0, 70, 53, 1, 3, 43, 0], 40, 56, 69),
    ("4P5", "chess.map", [1, 4, 44, 20, 0, 5, 20, 4, 42, 20, 1, 41, 20, 0, 40, 20, 0, 39, 20, 0, 38, 21, 1, 37, 21, 0, 36, 21, 0, 35, 20, 1, 34, 20, 0, 33, 20, 0, 32, 20, 0, 31, 20, 0, 30, 20, 0, 29, 20, 0, 29, 21, 1, 28, 21, 0, 27, 21, 0, 26, 21, 0, 25, 21, 0, 24, 21, 0, 23, 21, 0, 22, 21, 0, 21, 21, 0, 20, 21, 0, 19, 21, 0, 18, 21, 0, 17, 21, 0, 16, 21, 0, 15, 21, 0, 14, 21, 0, 13, 21, 0, 12, 21, 0, 11, 21, 0, 10, 21, 0, 9, 21, 0, 8, 21, 0, 7, 21, 0, 6, 22, 1, 5, 22, 0, 4, 22, 0, 4, 45, 0, 45, 45, 1, 45, 45, 0, 4, 4, 1, 45, 45, 0, 45, 4, 1, 4, 45, 0, 4, 4, 0, 6, 5, 1, 7, 7, 0, 8, 9, 1, 10, 10, 0, 12, 11, 1, 13, 13, 0, 14, 15, 1, 16, 16, 0, 18, 17, 1, 19, 19, 0, 20, 21, 1, 22, 22, 0, 24, 23, 1, 25, 25, 0, 26, 27, 1, 28, 28, 0, 30, 29, 1, 31, 31, 0, 32, 33, 1, 34, 34, 0, 36, 35, 1, 37, 37, 0, 38, 39, 1, 40, 40, 0, 42, 41, 1, 43, 43, 0, 44, 45, 1, 46, 46, 1, 45, 45, 1, 43, 44, 1, 41, 45, 1, 40, 43, 1, 39, 45, 1, 37, 44, 1, 35, 45, 1, 34, 43, 1, 33, 45, 1, 31, 44, 1, 29, 45, 1, 28, 43, 1, 27, 45, 1, 25, 44, 1, 23, 45, 1, 22, 43, 1, 21, 45, 1, 19, 44, 1, 17, 45, 1, 16, 43, 1, 15, 45, 1, 13, 44, 1, 11, 45, 1, 10, 43, 1, 9, 45, 1, 7, 44, 1, 5, 45, 1, 3, 46, 1, 46, 46, 1, 46, 3, 1, 3, 3, 1], 168, 288, 398),
    ("4P6", "islas25.map", [1, 4, 47, 53, 2, 49, 53, 2, 41, 56, 0, 52, 53, 1, 74, 54, 1, 74, 47, 1, 46, 42, 0, 71, 56, 1, 83, 52, 0, 58, 65, 0, 85, 43, 1, 92, 39, 0, 79, 68, 0, 91, 48, 0, 21, 95, 0, 92, 14, 0, 88, 64, 0, 43, 61, 0, 28, 78, 1, 30, 44, 0, 22, 18, 1, 27, 55, 1, 41, 16, 0, 90, 10, 0, 12, 49, 1, 76, 68, 1, 38, 74, 1], 17, 51, 64),
    ("4P7", "islas_cambio_climatico.map", [1, 4, 47, 53, 2, 49, 53, 2, 41, 56, 0, 52, 53, 1, 74, 54, 1, 74, 47, 1, 46, 42, 0, 71, 56, 1, 83, 52, 0, 58, 65, 0, 85, 43, 1, 92, 39, 0, 79, 68, 0, 91, 48, 0, 21, 95, 0, 92, 14, 0, 88, 64, 0, 43, 61, 0, 28, 78, 1, 30, 44, 0, 22, 18, 1, 27, 55, 1, 41, 16, 0, 90, 10, 0, 12, 49, 1, 76, 68, 1, 38, 74, 1], 38, 98, 142),
    ("4P8", "bosque_prohibido.map", [1, 4, 3, 15, 0, 15, 15, 0, 3, 3, 1, 3, 26, 1, 26, 26, 1, 26, 3, 1, 6, 5, 1, 9, 25, 1, 26, 19, 1, 4, 7, 1, 7, 25, 1, 4, 26, 1, 22, 5, 1, 25, 15, 1, 25, 23, 1, 4, 11, 1, 23, 26, 1, 8, 24, 1, 5, 15, 1, 25, 12, 1, 4, 26, 1, 5, 24, 1, 25, 3, 1, 25, 13, 1, 7, 24, 1, 4, 26, 1, 18, 25, 1, 25, 26, 1, 5, 16, 1, 25, 21, 1, 24, 24, 1, 24, 3, 1, 4, 26, 1, 14, 3, 1, 26, 25, 1, 25, 24, 1, 4, 7, 1, 24, 4, 1, 26, 4, 1, 25, 19, 1, 20, 4, 1, 4, 11, 1, 5, 7, 1, 24, 6, 1, 18, 25, 1, 3, 24, 1, 5, 10, 1, 3, 3, 1, 18, 4, 1, 14, 4, 1, 5, 4, 1, 25, 5, 1, 5, 9, 1, 26, 23, 1, 5, 12, 1, 4, 25, 1, 4, 7, 1, 3, 3, 1, 17, 4, 1, 3, 23, 1, 11, 5, 1, 13, 24, 1, 4, 21, 1, 10, 3, 1, 7, 5, 1, 3, 20, 1, 25, 8, 1, 3, 22, 1, 26, 19, 1, 4, 7, 1, 26, 23, 1, 25, 7, 1, 5, 26, 1, 17, 5, 1, 19, 26, 1, 24, 4, 1, 26, 20, 1, 24, 12, 1, 13, 25, 1, 4, 24, 1, 7, 5, 1, 24, 16, 1, 25, 13, 1, 17, 4, 1, 12, 4, 1, 19, 26, 1, 3, 26, 1, 25, 16, 1, 21, 25, 1, 25, 23, 1, 17, 3, 1, 4, 22, 1, 9, 5, 1, 17, 25, 1, 22, 3, 1, 24, 21, 1, 3, 3, 1, 4, 14, 1, 24, 21, 1, 16, 3, 1, 3, 25, 1, 10, 3, 1, 24, 22, 1, 26, 4, 1, 4, 19, 1, 3, 20, 1, 4, 16, 1, 5, 25, 1, 24, 15, 1, 13, 24, 1, 24, 16, 1, 25, 25, 1, 3, 24, 1, 5, 8, 1, 17, 26, 1, 23, 24, 1, 13, 25, 1, 20, 4, 1, 24, 19, 1, 6, 24, 1, 22, 4, 1, 12, 25, 1, 15, 24, 1, 4, 25, 1, 18, 24, 1, 4, 10, 1, 25, 25, 1, 3, 9, 1, 26, 9, 1, 16, 4, 1, 14, 5, 1, 24, 8, 1, 6, 25, 1, 21, 3, 1, 25, 15, 1, 26, 14, 1, 4, 5, 1, 23, 24, 1, 11, 5, 1, 24, 13, 1, 24, 21, 1, 3, 6, 1, 9, 24, 1, 3, 4, 1, 3, 26, 1, 3, 14, 1, 12, 4, 1, 26, 4, 1, 21, 25, 1, 4, 6, 1, 19, 3, 1, 24, 7, 1, 5, 16, 1, 24, 3, 1, 12, 24, 1, 23, 5, 1, 23, 5, 1, 4, 5, 1, 12, 5, 1, 4, 17, 1, 13, 24, 1, 8, 24, 1, 4, 24, 1, 13, 4, 1, 5, 26, 1, 5, 14, 1, 17, 5, 1, 5, 18, 1, 22, 24, 1, 25, 16, 1, 26, 7, 1, 24, 7, 1, 3, 15, 1, 3, 19, 1, 25, 6, 1, 6, 24, 1, 26, 4, 1, 25, 25, 1, 4, 3, 1, 15, 5, 1, 5, 16, 1, 5, 26, 1, 6, 5, 1, 4, 23, 1, 13, 4, 1, 4, 23, 1, 4, 9, 1, 25, 10, 1, 26, 9, 1, 4, 26, 1, 26, 19, 1, 25, 14, 1, 3, 25, 1, 9, 24, 1, 4, 5, 1, 5, 18, 1, 26, 16, 1, 3, 20, 1, 20, 5, 1, 4, 24, 1, 25, 11, 1, 26, 10, 1, 26, 23, 1, 26, 24, 1, 3, 11, 1, 16, 26, 1], 173, 405, 630),
    ("4P9", "paldea25.map", [1, 4, 91, 45, 2, 91, 50, 6, 86, 51, 0, 82, 48, 0, 74, 47, 1, 67, 48, 1, 67, 65, 0, 70, 73, 1, 64, 70, 0, 72, 28, 1, 59, 10, 0, 54, 29, 0, 47, 29, 1, 53, 81, 1, 45, 77, 0, 49, 62, 0, 40, 66, 0, 43, 39, 1, 49, 12, 0, 85, 16, 1, 23, 54, 1, 30, 57, 1, 9, 45, 0, 25, 33, 0, 31, 81, 0, 87, 52, 1, 67, 47, 1, 63, 38, 1, 46, 43, 1, 87, 63, 1, 61, 7, 1, 16, 23, 1, 32, 81, 1], 32, 45, 76),
    ("4PA", "luminalia25.map", [1, 4, 84, 39, 4, 66, 35, 6, 69, 62, 0, 46, 72, 0, 29, 47, 1, 42, 29, 0, 70, 35, 0, 87, 23, 0, 36, 94, 0, 36, 6, 0, 3, 50, 1, 50, 50, 1, 50, 18, 0, 51, 25, 1, 78, 46, 0, 69, 55, 1, 66, 80, 0, 27, 61, 1, 46, 86, 0, 61, 12, 1, 32, 28, 0, 45, 81, 1, 55, 21, 0, 17, 62, 1, 20, 38, 0, 78, 60, 1, 96, 3, 1, 67, 23, 1, 79, 23, 1, 61, 67, 1, 9, 39, 1, 3, 3, 0, 5, 96, 0, 83, 82, 1, 48, 47, 1, 48, 52, 1, 53, 47, 1, 53, 52, 1, 51, 50, 1], 38, 60, 98),
    ("4S1", "mapa30.map", [1, 4, 22, 19, 6, 12, 12, 2, 25, 17, 0, 7, 8, 0, 16, 6, 0, 26, 9, 1, 25, 16, 0, 3, 3, 0, 5, 10, 0, 16, 14, 0, 19, 10, 0, 21, 4, 1, 7, 4, 0, 24, 4, 0, 12, 3, 0, 6, 15, 0, 25, 18, 0, 8, 19, 0, 14, 14, 0, 23, 15, 1, 26, 8, 0, 10, 24, 1, 19, 26, 1, 25, 7, 0, 16, 11, 0, 22, 15, 1, 20, 15, 1, 22, 19, 1, 10, 20, 0, 4, 13, 0, 26, 24, 1, 9, 6, 0, 26, 10, 0, 17, 19, 1, 25, 13, 0, 24, 20, 1, 25, 19, 1, 12, 18, 1, 8, 23, 0, 9, 13, 1, 6, 5, 0, 8, 16, 1, 12, 5, 0, 3, 14, 1, 11, 22, 1, 11, 8, 0, 5, 17, 0, 7, 4, 0, 21, 3, 0, 23, 4, 1, 15, 5, 0, 7, 23, 0, 21, 19, 0, 4, 15, 1, 6, 13, 1, 23, 17, 1, 6, 26, 1, 5, 4, 0, 24, 10, 1, 16, 17, 1, 13, 20, 0, 21, 9, 1, 26, 22, 0, 22, 24, 0, 14, 4, 0, 24, 26, 0, 7, 18, 1, 6, 21, 1, 9, 9, 1, 18, 6, 0, 19, 15, 1, 16, 21, 0, 3, 14, 0, 12, 10, 0, 25, 13, 1, 17, 24, 1, 6, 20, 1, 14, 14, 0, 9, 21, 0, 5, 18, 1, 20, 20, 0, 19, 10, 1, 5, 18, 1, 18, 21, 1, 9, 22, 0, 20, 19, 1, 7, 15, 0, 26, 20, 0, 10, 17, 1, 17, 19, 1, 8, 23, 1, 8, 9, 1, 9, 5, 0, 20, 3, 0, 19, 11, 1, 6, 23, 0, 16, 8, 0, 26, 14, 0, 17, 4, 0, 8, 25, 0, 14, 13, 1, 25, 14, 0, 8, 5, 1, 20, 21, 1, 4, 18, 1, 14, 25, 1, 25, 17, 1], 62, 174, 312),
    ("4S2", "bosque_venenoso.map", [1, 4, 5, 20, 2, 11, 9, 2, 3, 26, 1, 3, 3, 1, 3, 26, 1, 26, 26, 1, 26, 3, 1, 6, 5, 1, 9, 25, 1, 26, 19, 1, 4, 7, 1, 7, 25, 1, 4, 26, 1, 22, 5, 1, 25, 15, 1, 25, 23, 1, 4, 11, 1, 23, 26, 1, 8, 24, 1, 5, 15, 1, 25, 12, 1, 4, 26, 1, 5, 24, 1, 25, 3, 1, 25, 13, 1, 7, 24, 1, 4, 26, 1, 18, 25, 1, 25, 26, 1, 5, 16, 1, 25, 21, 1, 24, 24, 1, 24, 3, 1, 4, 26, 1, 14, 3, 1, 26, 25, 1, 25, 24, 1, 4, 7, 1, 24, 4, 1, 26, 4, 1, 25, 19, 1, 20, 4, 1, 4, 11, 1, 5, 7, 1, 24, 6, 1, 18, 25, 1, 3, 24, 1, 5, 10, 1, 3, 3, 1, 18, 4, 1, 14, 4, 1, 5, 4, 1, 25, 5, 1, 5, 9, 1, 26, 23, 1, 5, 12, 1, 4, 25, 1, 4, 7, 1, 3, 3, 1, 17, 4, 1, 3, 23, 1, 11, 5, 1, 13, 24, 1, 4, 21, 1, 10, 3, 1, 7, 5, 1, 3, 20, 1, 25, 8, 1, 3, 22, 1, 26, 19, 1, 4, 7, 1, 26, 23, 1, 25, 7, 1, 5, 26, 1, 17, 5, 1, 19, 26, 1, 24, 4, 1, 26, 20, 1, 24, 12, 1, 13, 25, 1, 4, 24, 1, 7, 5, 1, 24, 16, 1, 25, 13, 1, 17, 4, 1, 12, 4, 1, 19, 26, 1, 3, 26, 1, 25, 16, 1, 21, 25, 1, 25, 23, 1, 17, 3, 1, 4, 22, 1, 9, 5, 1, 17, 25, 1, 22, 3, 1, 24, 21, 1, 3, 3, 1, 4, 14, 1, 24, 21, 1, 16, 3, 1, 3, 25, 1, 10, 3, 1, 24, 22, 1, 26, 4, 1, 4, 19, 1, 3, 20, 1, 4, 16, 1, 5, 25, 1, 24, 15, 1, 13, 24, 1, 24, 16, 1, 25, 25, 1, 3, 24, 1, 5, 8, 1, 17, 26, 1, 23, 24, 1, 13, 25, 1, 20, 4, 1, 24, 19, 1, 6, 24, 1, 22, 4, 1, 12, 25, 1, 15, 24, 1, 4, 25, 1, 18, 24, 1, 4, 10, 1, 25, 25, 1, 3, 9, 1, 26, 9, 1, 16, 4, 1, 14, 5, 1, 24, 8, 1, 6, 25, 1, 21, 3, 1, 25, 15, 1, 26, 14, 1, 4, 5, 1, 23, 24, 1, 11, 5, 1, 24, 13, 1, 24, 21, 1, 3, 6, 1, 9, 24, 1, 3, 4, 1, 3, 26, 1, 3, 14, 1, 12, 4, 1, 26, 4, 1, 21, 25, 1, 4, 6, 1, 19, 3, 1, 24, 7, 1, 5, 16, 1, 24, 3, 1, 12, 24, 1, 23, 5, 1, 23, 5, 1, 4, 5, 1, 12, 5, 1, 4, 17, 1, 13, 24, 1, 8, 24, 1, 4, 24, 1, 13, 4, 1, 5, 26, 1, 5, 14, 1, 17, 5, 1, 5, 18, 1, 22, 24, 1, 25, 16, 1, 26, 7, 1, 24, 7, 1, 3, 15, 1, 3, 19, 1, 25, 6, 1, 6, 24, 1, 26, 4, 1, 25, 25, 1, 4, 3, 1, 15, 5, 1, 5, 16, 1, 5, 26, 1, 6, 5, 1, 4, 23, 1, 13, 4, 1, 4, 23, 1, 4, 9, 1, 25, 10, 1, 26, 9, 1, 4, 26, 1, 26, 19, 1, 25, 14, 1, 3, 25, 1, 9, 24, 1, 4, 5, 1, 5, 18, 1, 26, 16, 1, 3, 20, 1, 20, 5, 1, 4, 24, 1, 25, 11, 1, 26, 10, 1, 26, 23, 1, 26, 24, 1, 3, 11, 1, 16, 26, 1], 172, 380, 595),
]



def parse_battery(output: str):
    for line in output.splitlines():
        if "Coste de Energía" in line:
            try:
                gasto = int(line.split(":")[1])
                return 3000 - gasto
            except ValueError:
                return None
    return None

def parse_discovery(output: str):
    for line in output.splitlines():
        if "Porcentaje descubierto de caminos y senderos" in line:
            try:
                return float(line.split(":")[1].strip())
            except ValueError:
                return None
    return None

def check_base_messages(output: str):
    rescatador_ok = "El rescatador ha alcanzado un puesto base." in output
    auxiliar_ok = "El auxiliar ha alcanzado un puesto base." in output
    return rescatador_ok, auxiliar_ok

def color_text(text, color_code):
    return f"\033[{color_code}m{text}\033[0m"

def run_test(map_name, params, expected_battery):
    result = subprocess.run(
        [EXEC, f"{MAP_DIR}/{map_name}"] + list(map(str, params)),
        capture_output=True,
        text=True
    )

    if result.returncode != 0:
        return (False, map_name, params, f"Error: {result.stderr.strip()}")

    level = params[1]
    if level == 0:
        rescatador_ok, auxiliar_ok = check_base_messages(result.stdout)
        if rescatador_ok and auxiliar_ok:
            return (True, map_name, None, "Bases alcanzadas")
        else:
            missing = []
            if not rescatador_ok:
                missing.append("Rescatador")
            if not auxiliar_ok:
                missing.append("Auxiliar")
            return (False, map_name, params, f"No alcanzado: {', '.join(missing)}")

    if level == 1:
        discovery = parse_discovery(result.stdout)
        if discovery is not None:
            score = round((discovery / 100) * 2.5, 3)
            return (True, map_name, None, f"Puntuación: {score} (descubierto {discovery:.4f}%)")
        else:
            return (False, map_name, params, "No se pudo obtener porcentaje descubierto")

    battery = parse_battery(result.stdout)
    if battery == expected_battery:
        return (True, map_name, None, battery)
    else:
        return (False, map_name, params, battery)

def format_score_line(test_id, color_code, score):
    icon = "\uf111"  # Unicode del círculo ''
    return f"{test_id} | \033[{color_code}m{icon}\033[0m {score:.3f} / 2.5"

def parse_level4_points(output: str):
    for line in output.splitlines():
        if "Objetivos encontrados" in line:
            try:
                return int(line.strip().split()[-1])
            except ValueError:
                return None
    return None

def calcular_nota_nivel4(puntos, u075, u15, u25):
    if puntos < u075:
        return 0.75 * (puntos / u075)
    elif puntos < u15:
        return 0.75 + 0.75 * ((puntos - u075) / (u15 - u075))
    elif puntos < u25:
        return 1.5 + 1.0 * ((puntos - u15) / (u25 - u15))
    else:
        return 2.5

if __name__ == "__main__":
    level1_results = []
    level1_scores = []
    total = len(tests)
    ok = 0
    failed_tests = []
    current_level = None

    for i, test in enumerate(tests):
        level = test[1][1]
        if level != current_level:
            if current_level == 1 and level1_results:
                # Mostrar resumen justo después de nivel 1
                print("\n")
                for row in level1_results:
                    print(row)
                avg = sum(level1_scores) / len(level1_scores)
                print(f"MEDIA = {avg:.3f} / 2.5\n")
                level1_results.clear()
                level1_scores.clear()

            current_level = level
            print(f"\n{color_text(f'Tests nivel {level}:', '34')}")

        success, map_name, params, info = run_test(*test)

        if level == 1 and isinstance(info, str) and "Puntuación:" in info:
            try:
                score_str, percent_str = info.split(":")[1].split("(")
                score = float(score_str.strip())
                percent = float(percent_str.strip().replace("descubierto", "").replace("%)", ""))

                if percent >= 99.9:
                    color_code = "34"  # Azul
                elif percent >= 80:
                    color_code = "32"  # Verde
                elif percent >= 50:
                    color_code = "33"  # Amarillo (oscuro)
                elif percent >= 30:
                    color_code = "93"  # Amarillo claro
                else:
                    color_code = "31"  # Rojo

                level1_results.append(format_score_line(f"1{i+1}", color_code, score))
                level1_scores.append(score)
            except Exception as e:
                print(color_text(f"⚠️ Error formateando puntuación: {e}", "33"))

        if success:
            print(color_text(f"✅ {map_name}", "32"))
            ok += 1
        else:
            if isinstance(info, str) and "Error" in info:
                print(color_text(f"❌ {map_name} {' '.join(map(str, params))}", "31"))
                print(color_text(f"   {info}", "31"))
            elif level == 1:
                print(color_text(f"❌ {map_name} {' '.join(map(str, params))}", "31"))
                print(color_text(f"   {info}", "31"))
            else:
                expected = test[2]
                print(color_text(f"❌ {map_name} {' '.join(map(str, params))}", "31"))
                print(color_text(f"   batería final = {info} (esperado {expected})", "31"))
            failed_tests.append((map_name, params))

    # Si los últimos tests fueron de nivel 1, imprimir resumen
    if current_level == 1 and level1_results:
        print("\n🗺 | 💯")
        print("-----------")
        for row in level1_results:
            print(row)
        avg = sum(level1_scores) / len(level1_scores)
        print("-----------")
        print(f"MEDIA = {avg:.3f} / 2.5\n")

    print("=" * 40)
    print(f"Total: {total} | OK: {ok} | Fails: {total - ok}")
    if failed_tests:
        print(color_text("\nTests fallidos:", "31"))
        for map_name, params in failed_tests:
            print(f"{EXEC} {MAP_DIR}/{map_name} {' '.join(map(str, params))}")

    # Tests del Nivel 4
    if tests4:
        print(f"\n{color_text('Tests nivel 4:', '34')}")
        for test_id, map_name, params, u075, u15, u25 in tests4:
            result = subprocess.run(
                [EXEC, f"{MAP_DIR}/{map_name}"] + list(map(str, params)),
                capture_output=True,
                text=True
            )
            if result.returncode != 0:
                print(color_text(f"❌ {test_id} Error: {result.stderr.strip()}", "31"))
                continue

            puntos = parse_level4_points(result.stdout)
            if puntos is None:
                print(color_text(f"❌ {test_id} No se pudo extraer puntuación", "31"))
                continue

            nota = calcular_nota_nivel4(puntos, u075, u15, u25)
            color_code = "31" if nota < 0.75 else "33" if nota < 1.5 else "32"
            print(format_score_line(test_id, color_code, nota))
